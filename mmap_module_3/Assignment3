Objective: 
	How to implement mmap driver file operation method

	I have provided necessary code for allocating and mapping kmalloc()
        and vmalloc() memory.  Also, test_mmap.c user program is given to test
        your driver mmap method. All you need to do is to convert it into
        complete char driver, add some additional functionality, compile and 
	test it.

Instruction:
	- Write a complete char driver that supports mmap. 
	- Write mmap method that mmap kmalloc memory to user 
	- Write mmap method that mmap vmalloc() memory to user
	- Initialize driver memory by writing ascii values 0123456789
	- Read and write to the device memory from user application
	- Implement read_proc() (/proc) method to verify driver buffer is
	  initialized and modified correctly before and after running a 
	  user mmap program.
	- Write a driver mmap method that checks the device minor number open
	  to decide type of kernel memory to map: mmap_kmalloc or mmap_vmalloc.

What to submit:
        Source code
        README: Details of your program. Output of your test run.
	
	Hint:	
	 - Create two device nodes with 0 and 1 minor number. Example:
	  crw-rw---- 1 root root    244,   1 2011-05-02 05:12 vmalloc_dev
	  crw-rw---- 1 root root    244,   0 2011-05-02 05:12 kmalloc_dev
	
	 - Use inode struct passed as argument to open() driver method to 
	   check the minor number using iminor(inode). Save the value into
	   file->private_data field of file struct.
	 - In driver mmap() method, extract the file->private_data value and
	   test it. If the minor number is set, call mmap_vmalloc() function.
	   otherwise, call mmap_kmalloc().
	 - Initalize both kmalloc and vmalloc buffers in the driver init 
	   routine. However, mmap only one type, kmalloc or vmalloc, memory to 
	   user space depending upon the device minor number opened by the 
	   application.
